#+TITLE: Roots
#+DATE: 2024
#+PROPERTY: header-args :tangle init.el
#+STARTUP: overview


* Usage
** Tangling
This file must be tangled or otherwise loaded with the help of ~org-babel~ in
order to activate any of the configuration contained within it. This can be
easily done from the root of this repository with ~make retangle~.

** Lazy Loading
The argument for lazy loading is mostly taken from the [[info:use-package#Deferring loading][Deferring loading]] section
of the ~use-package~ manual. This config attempts to be "strict" about lazy
loading; packages will be loaded lazily by default according to
~use-package-always-defer~ (See the ~use-package~ setup in ~early-init.el~.). The
~use-package~ manual describes how to leverage its features for this purpose, but
one of the simplest approaches that can be immediately applied to many packages
is using ~:hook~ to enable modes instead of just calling them. Compare:

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Immediately loads the package
  (use-package which-key
    :config (which-key-mode))

  ;; Defers loading
  (use-package which-key
    :hook (after-init . which-key-mode))
#+END_SRC


* Basic Setup
This section defines what I consider "sane defaults;" there are so many
variations of that idea out there that I doubt my opinions here are needed; just
try it and see if you like it.

** Lexical binding
For a discussion on what lexical binding is, and why this is
necessary, see the [[info:elisp#Variable Scoping][Variable Scoping]] node in the manual.

#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t -*-
  ;; This file is generated with `org-babel'. See the accompanying file
  ;; `roots.org' for the rationale behind the code.
#+END_SRC


** Editor defaults
These settings are essentially subjective, but serve to disable some annoyances
(lockfiles, audible bell) or improve ergonomics (~TAB~ for completion instead of
~C-M-i~).

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :hook (after-init . r/set-defaults)
    :config
    (defun r/set-defaults ()
      ;; By using `fundamental-mode' as the initial major mode, we're deferring
      ;; loading of `prog-mode' and some of its derivatives when starting up
      (setq inhibit-startup-screen t)
      (setq initial-major-mode 'fundamental-mode)
      (setq initial-scratch-message nil)

      ;; Avoid/streamline interactive questions.
      (defalias 'yes-or-no-p 'y-or-n-p)
      (setq confirm-kill-processes nil)
      (setq use-dialog-box nil)

      ;; Don't create backup/lockfiles.
      ;; This is the 21st century; we have git.
      (setq create-lockfiles nil)
      (setq make-backup-files nil)

      ;; `folder/filename' instead of `filename<2>'
      (setq uniquify-buffer-name-style 'forward)

      ;; Line style and indentation
      (setq-default indent-tabs-mode nil)
      (setq-default truncate-lines t)
      (setq-default fill-column 80)
      (setq require-final-newline t)

      ;; Scrolling
      (setq scroll-conservatively 101)
      (setq auto-hscroll-mode 'current-line)

      ;; Minibuffer
      (setq enable-recursive-minibuffers t)
      (setq max-mini-window-height 8)

      ;; Miscellaneous improvements
      (setq tab-always-indent 'complete)
      (setq Man-notify-method 'pushy)
      (setq ring-bell-function 'ignore)
      (setq line-spacing 0.1)))

  ;; Commands
  (use-package emacs
    :hook
    (after-init . repeat-mode)
    (after-init . r/enable-commands)
    :config
    (defun r/enable-commands ()
      (put 'narrow-to-region 'disabled nil)
      (put 'downcase-region 'disabled nil)
      (put 'upcase-region 'disabled nil)
      (put 'scroll-left 'disabled nil)
      (put 'scroll-right 'disabled nil)))
#+END_SRC

** Line Numbers
Some say that line numbers are something of an anti-pattern in Emacs, but
~display-line-numbers-mode~ doesn't seem to have an appreciable performance impact
and it's very helpful when discussing code with colleagues.

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :hook
    (prog-mode . display-line-numbers-mode)
    (display-line-numbers-mode . hl-line-mode)
    :config
    (setq-default display-line-numbers-width 3)
    (setq-default display-line-numbers-widen t)
    (setq-default display-line-numbers-grow-only t))
  #+END_SRC

** History
Keeping track of where you've been and the things you've done is an incredible
time saver. These settings are enabled in a function to shave maybe a few
milliseconds off of the init time.

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :hook
    (after-init . recentf-mode)
    (after-init . save-place-mode)
    (after-init . savehist-mode)
    (after-init . r/configure-history)
    :config
    (defun r/configure-history ()
      (with-eval-after-load 'recentf
        (setq recentf-max-saved-items 200)
        (add-to-list 'recentf-exclude '("\\/sudo:root@localhost.*"))
        (run-at-time nil (* 5 60) 'recentf-save-list))
      (setq savehist-additional-variables
            '(file-name-history
              search-ring
              command-history
              regexp-search-ring))))
#+END_SRC
